#!/usr/bin/ruby -w
#-----------------------------------------------------------------------------
#
#  OSM Inspector
#
#  Copyright 2008 Jochen Topf <jochen@topf.org>
#
#  http://osmlib.rubyforge.org/
#
#-----------------------------------------------------------------------------
#
#  OSM Inspector is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Foobar is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Foobar. If not, see <http://www.gnu.org/licenses/>.
#
#-----------------------------------------------------------------------------

$: << 'lib' << '../lib'

require 'rubygems'
require 'webrick'
require 'erb'
require 'pathname'
require 'OSM/API'

PORT = 8008
DIR = Pathname(__FILE__).dirname + 'osm-inspector-views'

class LookupServlet < WEBrick::HTTPServlet::AbstractServlet

    TYPE = { 'n' => 'node', 'w' => 'way', 'r' => 'relation' }

    def do_GET(request, response)
        response.status = 301

        if request.query['query'] =~ /^([nwr])([0-9]+)$/
            response['Location'] = "/#{TYPE[$1]}/#{$2}"
        else
            response['Location'] = "/"
        end
    end

end

class InspectorServlet < WEBrick::HTTPServlet::AbstractServlet

    TEMPLATES = {
        :layout => ERB.new((DIR + 'layout.rhtml').read),
        :object => ERB.new((DIR + 'object.rhtml').read),
        :node   => ERB.new((DIR + 'node.rhtml').read),
        :way    => ERB.new((DIR + 'way.rhtml').read),
        :tags   => ERB.new((DIR + 'tags.rhtml').read),
        :relation => ERB.new((DIR + 'relation.rhtml').read)
    }

    def template(template)
        TEMPLATES[template].result(binding)
    end

    def render(response)
        response['Content-Type'] = 'text/html; charset=UTF-8'
        response.status = 200
        response.body = template(:layout)
    end

end

class RootServlet < InspectorServlet

    def do_GET(request, response)
        @title = ''
        @content = ''
        render(response)
    end

end

class ObjServlet < InspectorServlet

    include ERB::Util

    API_URI_BASE = 'http://www.openstreetmap.org/api/0.5/'

    def initialize(config, type)
        super
        @type = type
        @api = OSM::API.new
        @uribase = OSM::API::DEFAULT_BASE_URI
    end

    def xmllink(suffix, text)
        %Q{<a href="#{@uribase}#{@type}/#{@id}#{suffix}">#{text}</a>}
    end

    def html_for_user(user)
        if user
            %Q{<a class="extlink" href="http://www.openstreetmap.org/user/#{u(user)}">#{h(user)}</a>}
        else
            '<i>(hidden)</i>'
        end
    end

    def html_for_object(obj)
        @obj = obj
        @user = html_for_user(obj.user)
        @tags = obj.tags
        template(@type.to_sym) + template(:tags)
    end

    def do_GET(request, response)
        if request.path !~ /^\/#{@type}\/([0-9]+)$/
            @title = ''
            @content = ''
            render(response)
            return
        end

        @id = $1.to_i
        @title = "#{@type.capitalize} #{@id} | "
        @xml = []
        @relations = []
        @history = []
        @object = nil
        begin
            @object = @api.get_object(@type, @id)
            @relations = @object.get_relations_from_api(@api)
            @history = @object.get_history_from_api(@api)
            @history.pop    # remove last element, because thats the current one
            @user = html_for_user(@object.user)
            @xml = [
                xmllink('', @type),
                xmllink('/history', 'history'),
                xmllink('/relations', 'relations')
            ]
            if @type == 'node'
                @ways = @object.get_ways_using_node_from_api(@api)
                @xml << xmllink('/ways', 'ways')
            end
            @objhtml = html_for_object(@object)
        rescue OSM::APIGone
            @objhtml = %Q{<h1 class="warn">Deleted!</h1>}
            @history = @api.get_history(@type, @id)
            @object = @history[-1]
            @xml = [ xmllink('/history', 'history') ]
        rescue OSM::APINotFound
            @objhtml = %Q{<h1 class="warn">Does not exist and never has</h1>}
        end

        if @history.size > 0
            @historyhtml = @history.collect{ |obj| '<div class="old">' + html_for_object(obj) + '</div>' }.join()
            @user = nil
            @tags = nil
        end

        @content = template(:object)
        render(response)
    end

end

server = WEBrick::HTTPServer.new(:Port => PORT)

server.mount('/',          RootServlet)
server.mount('/lookup',    LookupServlet)
server.mount('/node/',     ObjServlet, 'node')
server.mount('/way/',      ObjServlet, 'way')
server.mount('/relation/', ObjServlet, 'relation')

['TERM', 'INT'].each do |signal|
    trap(signal) { server.shutdown }
end

server.start

